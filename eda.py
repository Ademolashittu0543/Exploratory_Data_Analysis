# -*- coding: utf-8 -*-
"""EDA

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NfVwHxo8LgftACoGlcvxM4pDfxm-lLVr
"""

# @title Pizza Sales Analysis
import warnings
warnings.filterwarnings('ignore')
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
path='/content/drive/MyDrive/Dataset/Enhanced_pizza_sell_data_2024-25.xlsx'
df=pd.read_excel(path)
df.head()

# @title Inspecting Analysis
# Inspect dataset structure
def column_summary(df):
    summary_data = []

    for col_name in df.columns:
        col_dtype = df[col_name].dtype
        num_of_nulls = df[col_name].isnull().sum()
        num_of_non_nulls = df[col_name].notnull().sum()
        num_of_distinct_values = df[col_name].nunique()

        if num_of_distinct_values <= 10:
            distinct_values_counts = df[col_name].value_counts().to_dict()
        else:
            top_10_values_counts = df[col_name].value_counts().head(10).to_dict()
            distinct_values_counts = {k: v for k, v in sorted(top_10_values_counts.items(), key=lambda item: item[1], reverse=True)}

        summary_data.append({
            'col_name': col_name,
            'col_dtype': col_dtype,
            'num_of_nulls': num_of_nulls,
            'num_of_non_nulls': num_of_non_nulls,
            'num_of_distinct_values': num_of_distinct_values,
            'distinct_values_counts': distinct_values_counts
        })

    summary_df = pd.DataFrame(summary_data)
    return summary_df

summary_df = column_summary(df)
display(summary_df)

"""Insights:

â€¢ The dataset has 1005 rows and 25 columns.

â€¢ Columns include numerical (Delivery Duration (min), Distance (km)), categorical (Pizza Type, Traffic Level), temporal (Order Time, Delivery Time), and boolean (Is Peak Hour, Is Weekend) data.

â€¢ No missing values are apparent from info(), but weâ€™ll confirm in the next step.
"""

# @title Data cleaning and preprocessing
# Check for missing values
print("Missing Values:\n", df.isnull().sum())

# Remove duplicates
df = df.drop_duplicates()
print("\nShape after removing duplicates:", df.shape)

# Convert Order Time and Delivery Time to datetime
df['Order Time'] = pd.to_datetime(df['Order Time'])
df['Delivery Time'] = pd.to_datetime(df['Delivery Time'])
df.head()

# Select numeric columns (e.g., int64, float64)
numeric_columns = df.select_dtypes(include=['int64', 'float64']).columns
print("Numeric Columns:", numeric_columns)

# Select categorical columns
categorical_columns = df.select_dtypes(include=['object']).columns
print("Categorical Columns:", categorical_columns)

# Verify categorical variables
for col in categorical_columns:
    print(f"\nðŸ”¹ {col} â€” Unique values:")
    print(df[col].unique())

# Check for outliers using IQR for numerical columns
for col in numeric_columns:
    Q1 = df[col].quantile(0.25)
    Q3 = df[col].quantile(0.75)
    IQR = Q3 - Q1
    outliers = df[(df[col] < Q1 - 1.5 * IQR) | (df[col] > Q3 + 1.5 * IQR)][col]
    print(f"\nOutliers in {col}:", outliers.shape[0])

# Validate Delay (min) calculation
df['Calculated Delay'] = df['Delivery Duration (min)'] - df['Estimated Duration (min)']
delay_mismatch = df[abs(df['Delay (min)'] - df['Calculated Delay']) > 0.01]
print("\nDelay Mismatch Rows:", delay_mismatch.shape[0])

"""# Insights

â€¢ No missing values were found.

â€¢ No duplicates were detected (shape unchanged).

â€¢ Order Time and Delivery Time are now datetime objects.

â€¢ Categorical variables show consistent categories, though Pizza Type includes specific types like Sicilian and BBQ Chicken alongside general types like Veg.

â€¢ Outliers exist in Delivery Duration (min) and Distance (km) (70 rows), likely due to longer deliveries (e.g., 40 or 45 minutes, 8-10 km). Weâ€™ll keep these for now, as they may reflect valid long-distance orders.

â€¢ Delay (min) matches the calculated difference, confirming data integrity.
"""

# @title Univariate Analysis
import seaborn as sns
print("\nSummary Statistics for Numerical Variables:")
print(df[numeric_columns].describe().T)

# @title Histograms and box plots (Numerical variables)
for col in numeric_columns:
    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    sns.histplot(df[col], kde=True)
    plt.title(f'Histogram of {col}')
    plt.subplot(1, 2, 2)
    sns.boxplot(y=df[col])
    plt.title(f'Box Plot of {col}')
    plt.tight_layout()
    plt.show()

"""# Insights


ðŸ”¹ **Delivery & Time Metrics**


â€¢ Delivery Duration (min) has a mean of ~29.5 mins, with a maximum of 50 mins, suggesting a few long delays.

â€¢ Estimated Duration (min) is much shorter (mean â‰ˆ 11.9 mins), implying that actual delivery often exceeds estimates.

â€¢ Delay (min) has an average of ~17.6 mins, meaning on average, deliveries are running significantly late compared to estimated durations.

ðŸ”¹**Efficiency & Distance**

â€¢ Delivery Efficiency (min/km) averages around 6.4 minutes per km, but can go up to 12.5, indicating poor performance for some long-distance orders.

â€¢ Distance (km) has a mean of ~4.95 km, with deliveries ranging up to 10 km.

ðŸ”¹ **Toppings & Complexity**

â€¢ Most pizzas have between 3 and 4 toppings, with Toppings Count maxing at 5.

â€¢ Pizza Complexity has a wide range: from 1 to 20, with a mean of ~9.5, showing substantial variation in order difficulty.

â€¢ Topping Density (toppings per km or per minute?) centers around 0.71, which could be used to analyze operational impact.

ðŸ”¹ **Operational Constraints**

â€¢ Restaurant Avg Time is very consistent (~29.5 mins with tiny standard deviation ~0.86) â€” indicating consistent internal processing.

â€¢ Order Hour clusters tightly between 18 and 21 (mean â‰ˆ 18.7), suggesting peak demand in evening hours.

ðŸ”¹**Traffic Influence**

â€¢ Traffic Impact is skewed toward the lower end (mean â‰ˆ 2.05 out of 3), but still shows potential delays from traffic level 3.

**Summary Takeaways**

â€¢ There is a systematic underestimation in delivery time (Estimated vs Actual).

â€¢ Some deliveries are very inefficient (high Delivery Efficiency), particularly for longer distances.

â€¢ High Pizza Complexity and Traffic Impact could be important features for predicting delay.

â€¢ Evening orders dominate â€” making time-of-day a potentially valuable factor for demand forecasting or staffing.

# **Insights**

###**Delivery Duration (min)**

â€¢ Histogram: Most deliveries are completed
within 20-30 minutes, with fewer deliveries taking longer than 35 minutes.

â€¢ Box Plot: The median delivery time is around 25 minutes, with some outliers extending beyond 40 minutes, indicating occasional delays.

###**Toppings Count**

â€¢ Histogram: The majority of pizzas have 2-3 toppings, with fewer orders having 1 or more than 4 toppings.

â€¢ Box Plot: The median number of toppings is ~2.5, with a relatively symmetric distribution and minimal outliers.

###**Distance (km)**

â€¢ Histogram: Most delivery distances are short (likely under 5 km), with fewer orders requiring longer distances.

â€¢ Box Plot: The median distance is low, with a right-skewed distribution suggesting occasional faraway deliveries.

###**Delivery Efficiency (min/km)**

â€¢ Histogram: Most deliveries have an efficiency of 6-10 min/km, peaking around 8 min/km.

â€¢ Box Plot: The median efficiency is ~8 min/km, with some outliers above 12 min/km, indicating inefficiencies in certain cases.

###**Topping Density**

â€¢ Histogram: The distribution is centered around 0.8â€“1.2, suggesting a balanced ratio of toppings to pizza size.

â€¢ Box Plot: The median is ~1.0, with a symmetric spread and no extreme outliers.

###**Estimated Duration (min)**

â€¢ Histogram: Most estimates fall between 10-15 minutes, with fewer below 5 or above 20 minutes.

â€¢ Box Plot: The median estimate is ~12.5 minutes, with a tight interquartile range and few outliers.

###**Delay (min)**

â€¢ Histogram: Delays are mostly under 15 minutes, with a few cases reaching 20-30 minutes.

â€¢ Box Plot: The median delay is ~10 minutes, but outliers suggest occasional significant delays.

###**Pizza Complexity**

â€¢ Histogram: Most pizzas have low-moderate complexity (5-10), with fewer highly complex orders (>15).

â€¢ Box Plot: The median complexity is ~10, with a right-skewed distribution indicating occasional highly complex pizzas.

###**Order Hour**

â€¢ Histogram: Peak ordering hours are 14:00â€“18:00 (2 PMâ€“6 PM), likely aligning with lunch and dinner rushes.

â€¢ Box Plot: The median order time is ~16:00 (4 PM), with a concentrated distribution around afternoon/evening.

###**Restaurant Avg Time**

â€¢ Histogram: The histogram of Restaurant Avg Time shows a highly skewed distribution, with the majority of values concentrated around 29.5 to 30.0 minutes, indicating that most restaurants have an average delivery time in this range.

â€¢ Boxplot: The box plot indicates a median Restaurant Avg Time close to 29.5 minutes, with the interquartile range (IQR) tightly clustered around this value, reflecting consistency in delivery times across most restaurants. An outlier is present below 26.5 minutes, indicating a rare instance of a restaurant with a significantly lower average delivery time.

###**Traffic Impact**

â€¢ Histogram: The histogram of Traffic Impact shows a multimodal distribution, with the highest frequency around 2.00, indicating that the majority of traffic impacts are centered at this value.

â€¢ Boxplot: The box plot indicates a median Traffic Impact close to 2.00, with the interquartile range (IQR) tightly clustered between approximately 1.75 and 2.25, showing that 50% of the data points fall within this narrow range.No outliers are visible in the box plot, indicating that all Traffic Impact values are within a reasonable range relative to the median.

###**Key Takeaways:**

â€¢ Delivery Performance: Most deliveries are efficient (20-30 min), but outliers highlight occasional delays.

â€¢ Toppings Preference: Customers typically order 2-3 toppings, balancing variety and simplicity.

â€¢ Peak Hours: Order volume spikes in the late afternoon, suggesting targeted staffing or promotions during these times.

â€¢ Efficiency: Delivery efficiency is generally consistent (~8 min/km), but outliers may warrant route optimization.

â€¢ Complexity Impact: Highly complex pizzas are rare but may require additional preparation time, contributing to delays.

These insights could guide improvements in operations, marketing, and customer experience.
"""

# @title Histogram plots (Categorical variables)

categorical_cols = ['Restaurant Name', 'Location', 'Pizza Size', 'Pizza Type',
       'Traffic Level', 'Payment Method', 'Order Month', 'Payment Category']
for col in categorical_cols:
    print(f"\nFrequency Count for {col}:")
    print(df[col].value_counts())

    plt.figure(figsize=(10, 5))
    sns.countplot(x=col, data=df, order=df[col].value_counts().index)
    plt.title(f'Count Plot of {col}')
    plt.xticks(rotation=45)
    plt.show()

# @title Bivariate Analysis
# Numerical vs. Numerical: Correlation matrix
corr_matrix = df[numeric_columns].corr()
plt.figure(figsize=(10, 8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Matrix')
plt.show()

"""# **Insights from Correlation Matrix**

###**Strong Positive Correlations (â‰¥ 0.7)**
**Delivery Duration & Distance (0.91):**

â€¢ Longer distances directly increase delivery time. Route optimization is critical for faraway orders.

**Delivery Duration & Estimated Duration (0.91):**

â€¢ The systemâ€™s time estimates are highly accurate, aligning closely with actual delivery times.

**Delivery Duration & Delay (0.88):**

â€¢ Delays (e.g., traffic, preparation) are the primary driver of longer delivery times.

**Toppings Count & Pizza Complexity (0.96):**

â€¢ More toppings = more complex pizzas, likely requiring extra preparation time.

**Distance & Estimated Duration (1.00):**

â€¢ Distance is the sole factor in time estimates (no traffic or prep adjustments).

###**Strong Negative Correlations (â‰¤ -0.4)**
**Delivery Efficiency & Toppings Count (-0.71)**:

â€¢ Pizzas with more toppings slow down min/km efficiency, possibly due to handling or packaging.

**Delivery Efficiency & Distance (-0.70)**:

â€¢ Efficiency drops sharply for longer distances, suggesting non-linear delays (e.g., traffic, route issues).

**Topping Density & Delivery Duration (-0.53)**:

â€¢ Higher topping density (toppings per size unit) correlates with faster deliveries, possibly due to standardized recipes.

###**Moderate Correlations (0.4â€“0.69)**

**Traffic Impact & Delivery Duration (0.58)**:

â€¢ Traffic worsens delays, but less than distance or prep time.

**Order Hour & Delay (0.44)**:

â€¢ Peak hours (e.g., dinner) see more delays, likely from high demand or traffic.

###**Weak/No Correlation (â‰¤ Â±0.3)**

**Restaurant Avg Time & All Metrics (~0.1)**:

â€¢ Restaurant speed has minimal impact on delivery times; delays are external (e.g., traffic, distance).

**Order Hour & Efficiency (-0.01)**:

â€¢ Efficiency is consistent across hours, suggesting stable operations.

#**Actionable Recommendations**
**Optimize Long-Distance Deliveries**:

â€¢ Prioritize route planning or satellite kitchens for orders >5 km.

**Peak Hour Management**:

â€¢ Add staff or dynamic pricing during 14:00â€“18:00 to mitigate delay spikes.

**Simplify High-Topping Orders**:

â€¢ Bundle popular topping combos to reduce complexity and prep time.

**Revise Efficiency Metrics**:

â€¢ Include traffic and toppings in efficiency calculations (current metric ignores key factors).

**Restaurant Collaboration**:

â€¢ Since restaurant speed doesnâ€™t affect delivery, focus on external factors (traffic, dispatch).

###**Conclusion**

 Distance and toppings are the top controllable levers; traffic and peak hours require systemic solutions.
"""

# Duration vs. Distance by Traffic Level: Scatter plot
import matplotlib.pyplot as plt
import seaborn as sns

# Set figure size and style
plt.figure(figsize=(10, 6))
sns.set(style="whitegrid")

# Create scatter plot
scatter = sns.scatterplot(
    data=df,
    x='Distance (km)',
    y='Delivery Duration (min)',
    hue='Traffic Level',
    size='Toppings Count',
    palette='viridis',
    sizes=(40, 200),
    alpha=0.8
)

# Title and axis labels
plt.title('Delivery Duration vs. Distance by Traffic Level', fontsize=14)
plt.xlabel('Distance (km)')
plt.ylabel('Delivery Duration (min)')

# Show legend and plot
plt.legend(title='Traffic Level', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

"""# **Insights**

###**Traffic Impact on Delivery Time:**

â€¢ High Traffic: Deliveries take significantly longer (e.g., 30â€“40 min) even for shorter distances (e.g., 2â€“5 km), indicating traffic congestion as a major delay factor.

â€¢ Low Traffic: Deliveries are faster (15â€“25 min), especially for shorter distances (<5 km), showing optimal efficiency.

â€¢ Medium Traffic: Falls between high and low, with durations closer to 20â€“30 min.

###**Distance vs. Duration Relationship**:

â€¢ Linear Trend: Longer distances generally increase delivery time, but the effect is exaggerated during high traffic.

â€¢ Outliers: Some short-distance orders (e.g., 3 km) take as long as 35+ min during high traffic, suggesting bottlenecks (e.g., urban areas).

###**Toppings Count Influence**:

â€¢ Higher toppings (4â€“5) correlate with slightly longer delivery times, possibly due to additional preparation time or order complexity.

â€¢ Low-topping orders (1â€“2) are more likely to align with the "Low Traffic" trend, indicating simpler orders are less affected by delays.

###**Operational Insights**:

â€¢ Peak Traffic Mitigation: Prioritize route optimization or dynamic pricing during high-traffic hours to manage delays.

â€¢ Distance Threshold: Deliveries beyond 5 km show steeper duration increases; consider localized kitchens or delivery hubs for faraway orders.

###**Key Takeaway**

Traffic level is the dominant factor in delivery duration, overshadowing distance and order complexity. Strategic adjustments (e.g., traffic-aware dispatch) could improve efficiency.



"""

# Delivery Duration by Traffic Level and Peak Hour: Box plot
plt.figure(figsize=(10, 5))
sns.boxplot(x='Traffic Level', y='Delivery Duration (min)', hue='Is Peak Hour', data=df)
plt.title('Delivery Duration by Traffic Level and Peak Hour')
plt.show()

"""# **Insights**

###**Traffic Level Impact:**

â€¢ High Traffic: Consistently results in the longest delivery times, regardless of peak hours.

â€¢ Low Traffic: Deliveries are fastest, showing optimal efficiency during off-peak conditions.

â€¢ Medium Traffic: Falls between high and low, with moderate delays.

###**Peak Hour Influence:**

**During Peak Hours (True):**

â€¢ Delays are exacerbated, especially in medium and high traffic, suggesting that combined demand and congestion significantly slow deliveries.

â€¢ Even low traffic sees a slight increase in duration during peak times, likely due to higher order volume.

**Off-Peak Hours (False):**

â€¢ Deliveries are faster across all traffic levels, with the most significant improvements in high-traffic scenarios.

###**Worst-Case Scenario:**

â€¢ High Traffic + Peak Hour: Longest delivery times, indicating a critical need for traffic mitigation strategies during busy periods.

###**Best-Case Scenario:**

â€¢ Low Traffic + Off-Peak: Fastest deliveries, representing the ideal operational condition.


# **Actionable Recommendations**
###**Dynamic Resource Allocation**

â€¢ Increase delivery staff or fleet during peak hours to offset traffic-related delays.

â€¢ Prioritize high-traffic zones with additional resources or alternative routes.

###**Peak Hour Adjustments**

â€¢ Incentivize off-peak orders (e.g., discounts for early/late deliveries) to balance demand.

â€¢ Communicate longer wait times proactively during peak hours to manage customer expectations.

###**Traffic Mitigation**

â€¢ Use real-time traffic data to optimize delivery routes dynamically.

â€¢ Partner with navigation apps to identify faster routes during high-traffic periods.

###**Performance Monitoring**

â€¢ Track delivery times by traffic level and hour to identify recurring bottlenecks.

â€¢ Test interventions (e.g., staggered shifts, traffic-aware dispatch) in high-impact scenarios.

##**Conclusion**

â€¢ Peak hours and traffic levels compound delays, but strategic adjustments can mitigate their impact.

â€¢ Focus on demand balancing and traffic-aware logistics to maintain efficiency during critical periods.


"""

# Pizza Type vs. Payment Method: Cross-tabulation
print("\nCross-tabulation of Pizza Type vs. Payment Method:")
print(pd.crosstab(df['Pizza Type'], df['Payment Method']))

"""# Insights

â€¢ Card, UPI, and Wallet are the most widely used payment methods overall.

â€¢ Veg and Non-Veg pizzas have the most diverse payment mix â€” including all methods.

â€¢ Vegan pizzas are strongly preferred with Cash and UPI, possibly indicating a different buyer profile.

â€¢ Cheese Burst sees very high usage of Hut Points and UPI, likely tied to loyalty customers.

â€¢ Wallet usage is highest for Veg pizzas (85), followed by Non-Veg and Gluten-Free.

â€¢ Deep Dish and Thin Crust pizzas show very limited purchases â€” possible low popularity or availability.
"""

# @title Temporal Analysis
# Extract year and day
df['Order Year'] = df['Order Time'].dt.year
df['Order Day'] = df['Order Time'].dt.day_name()

# Delivery Duration by Order Month
plt.figure(figsize=(10, 5))
sns.boxplot(x='Order Month', y='Delivery Duration (min)', data=df)
plt.title('Delivery Duration by Order Month')
plt.xticks(rotation=45)
plt.show()

# Delivery Duration by Order Hour
plt.figure(figsize=(10, 5))
sns.boxplot(x='Order Hour', y='Delivery Duration (min)', hue='Is Weekend', data=df)
plt.title('Delivery Duration by Order Hour and Weekend')
plt.xticks(rotation=45)
plt.show()

# Line plot for monthly trends
monthly_avg = df.groupby('Order Month')['Delivery Duration (min)'].mean().reset_index()
plt.figure(figsize=(10, 5))
sns.lineplot(x='Order Month', y='Delivery Duration (min)', data=monthly_avg)
plt.title('Average Delivery Duration by Month')
plt.xticks(rotation=45)
plt.show()

"""# Insights

â€¢ Monthly Trends: Delivery Duration peaks in August (~40 minutes for some orders), possibly due to higher demand or traffic.

â€¢ Hourly Trends: Evening hours (18:00-20:00) show higher durations, especially on weekdays, due to peak hours.

â€¢ Weekend vs. Weekday: Weekends may have slightly lower durations due to less traffic in some cities.
"""

# @title Feature Engineering Exploration
# Create Delivery Speed (km/min)
df['Delivery Speed (km/min)'] = 1 / df['Delivery Efficiency (min/km)']

# Create Is Long Distance
df['Is Long Distance'] = df['Distance (km)'] >= 5
print(df['Is Long Distance'].value_counts())

# Verify new features
print("\nNew Features Summary:")
df[['Distance (km)','Delivery Speed (km/min)', 'Is Long Distance']].sample(10)

"""# Insights

â€¢ Delivery Speed provides an alternative perspective on efficiency.

â€¢ Is Long Distance flags 485 rows with Distance >= 5 km, useful for analyzing long deliveries.
"""

# @title Statistical Test
from scipy.stats import ttest_ind, f_oneway
# T-test: Delivery Duration by Peak Hour
peak = df[df['Is Peak Hour']]['Delivery Duration (min)']
non_peak = df[~df['Is Peak Hour']]['Delivery Duration (min)']
t_stat, p_value = ttest_ind(peak, non_peak)
print(f"\nT-test (Peak vs. Non-Peak Hour): t-stat={t_stat:.2f}, p-value={p_value:.4f}")

# ANOVA: Delivery Duration by Traffic Level
low = df[df['Traffic Level'] == 'Low']['Delivery Duration (min)']
medium = df[df['Traffic Level'] == 'Medium']['Delivery Duration (min)']
high = df[df['Traffic Level'] == 'High']['Delivery Duration (min)']
f_stat, p_value = f_oneway(low, medium, high)
print(f"ANOVA (Traffic Level): f-stat={f_stat:.2f}, p-value={p_value:.4f}")

"""# Insight

â€¢ The T-test result for Delivery Duration (min) between peak and non-peak hours shows a t-statistic of 7.58 and a p-value of 0.0000, indicating a highly significant difference (p < 0.05) between the two groups, with peak hours likely associated with longer delivery times.

â€¢ The ANOVA result for Delivery Duration (min) across Traffic Level categories yields an F-statistic of 252.74 and a p-value of 0.0000, suggesting a highly significant difference (p < 0.05) in delivery times across low, medium, and high traffic levels, with higher traffic levels likely contributing to increased durations.

# **Overall Actionable Recommendation Based on the Analysis**

###**Dynamic Resource Allocation:**

â€¢ Increase delivery staff or fleet capacity during peak hours (e.g., 18:00-20:00) to handle the significantly longer delivery times identified by the T-test (t-stat=7.58, p-value=0.0000), which indicate peak hours are a critical bottleneck.

â€¢ Allocate additional resources or prioritize alternative routes in high-traffic zones, as the ANOVA results (F-stat=252.74, p-value=0.0000) show a strong correlation between higher traffic levels and increased delivery durations.

###**Peak Hour Adjustments:**

â€¢ Offer incentives such as discounts for off-peak orders (e.g., early morning or late evening) to balance demand and reduce congestion during peak times.

â€¢ Proactively communicate longer wait times to customers during peak hours to manage expectations and improve satisfaction.

###**Traffic Mitigation:**

â€¢ Integrate real-time traffic data into route optimization systems to dynamically adjust delivery paths, especially during high-traffic periods (e.g., medium and high traffic levels).

â€¢ Partner with navigation apps to identify and recommend faster routes, leveraging the significant traffic impact on delivery times.

###**Performance Monitoring:**

â€¢ Regularly track delivery durations by traffic level and hour to identify recurring bottlenecks, using the statistical significance from the ANOVA as a guide.

â€¢ Test interventions such as staggered delivery shifts or traffic-aware dispatch algorithms in high-impact scenarios to improve efficiency.

###**Long-Distance Delivery Optimization:**

â€¢ Focus on improving delivery speed (e.g., average 0.133-0.183 km/min) for long-distance orders (Distance â‰¥ 5 km, 485 rows), which could involve assigning dedicated drivers or optimizing routes for these deliveries.

â€¢ Analyze the 519 non-long-distance deliveries to ensure they maintain high efficiency, potentially reallocating resources from shorter to longer routes as needed.

##**Conclusion:**

The analysis highlights that peak hours and traffic levels significantly compound delivery delays. Strategic adjustments in resource allocation, demand balancing, and traffic-aware logistics can mitigate these impacts, ensuring consistent delivery performance across varying conditions.
"""